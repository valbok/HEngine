/**
 * @author VaL Doroshchuk
 * @license GNU GPL v2
 */

#include "HEngine_sn.h"
#include "gtest/gtest.h"

#include <algorithm>
#include <time.h>
using namespace hengine;

TEST( HEngine_sn, HammingDistance )
{
    HEngine_sn e( 4 );

    EXPECT_EQ( 4, e.getHammingDistanceBound() );
}

TEST( HEngine_sn, AutSegmentationFactor )
{
    HEngine_sn e( 4 );

    EXPECT_EQ( 4, e.getHammingDistanceBound() );
    EXPECT_EQ( 3, e.getSegmentationFactor() );
}

TEST( HEngine_sn, CustomSegmentationFactor )
{
    HEngine_sn e( 4, 4 );

    EXPECT_EQ( 4, e.getHammingDistanceBound() );
    EXPECT_EQ( 4, e.getSegmentationFactor() );
}

TEST( HEngine_sn, SegmentationFactor5 )
{
    HEngine_sn e( 5 );

    EXPECT_EQ( 3, e.getSegmentationFactor() );
}

TEST( HEngine_sn, SegmentationFactor6 )
{
    HEngine_sn e( 6 );

    EXPECT_EQ( 4, e.getSegmentationFactor() );
}

TEST( HEngine_sn, SegmentationFactor7 )
{
    HEngine_sn e( 7 );

    EXPECT_EQ( 4, e.getSegmentationFactor() );
}

TEST( HEngine_sn, SegmentationFactor8 )
{
    HEngine_sn e( 8 );

    EXPECT_EQ( 5, e.getSegmentationFactor() );
}

TEST( HEngine_sn, SegmentationFactor9 )
{
    HEngine_sn e( 9 );

    EXPECT_EQ( 5, e.getSegmentationFactor() );
}

TEST( HEngine_sn, SegmentationFactor10 )
{
    HEngine_sn e( 10 );

    EXPECT_EQ( 6, e.getSegmentationFactor() );
}

TEST( HEngine_sn, RCut1 )
{
    HEngine_sn e( 0, 1 );

    NumTable t = e.rcut( "1111111111111111111111111111111111111111111111111111111111111111" );
    EXPECT_EQ( 1, t.size() );
    EXPECT_EQ( "1111111111111111111111111111111111111111111111111111111111111111", HEngine::number2BinStr( t[0] ) );
}

TEST( HEngine_sn, RCut2 )
{
    HEngine_sn e( 0, 2 );

    NumTable t = e.rcut( "1111111111111111111111111111111100000000000000000000000000000000" );
    EXPECT_EQ( 2, t.size() );
    EXPECT_EQ( "0000000000000000000000000000000011111111111111111111111111111111", HEngine::number2BinStr( t[0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[1] ) );
}

TEST( HEngine_sn, RCut3 )
{
    HEngine_sn e( 0, 3 );

    NumTable t = e.rcut( "1111111111111111111110000000000000000000001111111111111111111111" );
    EXPECT_EQ( 3, t.size() );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111111111111111", HEngine::number2BinStr( t[0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001111111111111111111111", HEngine::number2BinStr( t[2] ) );
}

TEST( HEngine_sn, RCut4 )
{
    HEngine_sn e( 0, 4 );

    NumTable t = e.rcut( "1111111111111111000000000000000011111111111111110000000000000000" );
    EXPECT_EQ( 4, t.size() );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000001111111111111111", HEngine::number2BinStr( t[0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000001111111111111111", HEngine::number2BinStr( t[2] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[3] ) );
}

TEST( HEngine_sn, RCut5 )
{
    HEngine_sn e( 0, 5 );

    NumTable t = e.rcut( "1111111111110000000000000111111111111100000000000001111111111111" );
    EXPECT_EQ( 5, t.size() );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000111111111111", HEngine::number2BinStr( t[0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000001111111111111", HEngine::number2BinStr( t[2] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[3] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000001111111111111", HEngine::number2BinStr( t[4] ) );
}

TEST( HEngine_sn, RCut6 )
{
    HEngine_sn e( 0, 6 );

    NumTable t = e.rcut( "1111111111000000000011111111111000000000001111111111100000000000" );
    EXPECT_EQ( 6, t.size() );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000001111111111", HEngine::number2BinStr( t[0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000011111111111", HEngine::number2BinStr( t[2] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[3] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000011111111111", HEngine::number2BinStr( t[4] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[5] ) );
}

TEST( HEngine_sn, RCut7 )
{
    HEngine_sn e( 0, 7 );

    NumTable t = e.rcut( "1111111110000000001111111110000000001111111110000000001111111111" );
    EXPECT_EQ( 7, t.size() );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000111111111", HEngine::number2BinStr( t[0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000111111111", HEngine::number2BinStr( t[2] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[3] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000111111111", HEngine::number2BinStr( t[4] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[5] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000001111111111", HEngine::number2BinStr( t[6] ) );
}

TEST( HEngine_sn, RCut8 )
{
    HEngine_sn e( 0, 8 );

    NumTable t = e.rcut( "1111111100000000111111110000000011111111000000001111111100000000" );
    EXPECT_EQ( 8, t.size() );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000011111111", HEngine::number2BinStr( t[0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000011111111", HEngine::number2BinStr( t[2] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[3] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000011111111", HEngine::number2BinStr( t[4] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[5] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000011111111", HEngine::number2BinStr( t[6] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[7] ) );
}

TEST( HEngine_sn, Permute )
{
    HEngine_sn e( 4 );

    Permutations t = e.permute( "1111111111111111111110000000000000000000001111111111111111111111" );
    EXPECT_EQ( 3, t.size() );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111111111111111", HEngine::number2BinStr( t[0][0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[0][1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001111111111111111111111", HEngine::number2BinStr( t[0][2] ) );

    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[1][0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111111111111111", HEngine::number2BinStr( t[1][1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001111111111111111111111", HEngine::number2BinStr( t[1][2] ) );

    EXPECT_EQ( "0000000000000000000000000000000000000000001111111111111111111111", HEngine::number2BinStr( t[2][0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111111111111111", HEngine::number2BinStr( t[2][1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[2][2] ) );
}

TEST( HEngine_sn, Permute4 )
{
    HEngine_sn e( 4, 4 );

    Permutations t = e.permute( "0000000000000000111111111111111100000000000000001111111111111111" );
    EXPECT_EQ( 4, t.size() );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[0][0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000001111111111111111", HEngine::number2BinStr( t[0][1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[0][2] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000001111111111111111", HEngine::number2BinStr( t[0][3] ) );

    EXPECT_EQ( "0000000000000000000000000000000000000000000000001111111111111111", HEngine::number2BinStr( t[1][0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[1][1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[1][2] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000001111111111111111", HEngine::number2BinStr( t[1][3] ) );

    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[2][0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[2][1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000001111111111111111", HEngine::number2BinStr( t[2][2] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000001111111111111111", HEngine::number2BinStr( t[2][3] ) );

    EXPECT_EQ( "0000000000000000000000000000000000000000000000001111111111111111", HEngine::number2BinStr( t[3][0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[3][1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000001111111111111111", HEngine::number2BinStr( t[3][2] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[3][3] ) );
}

TEST( HEngine_sn, getRCutBitLength2 )
{
    HEngine_sn e( 0, 2 );
    EXPECT_EQ( 32, e.getRCutBitLength( 0 ) );
    EXPECT_EQ( 32, e.getRCutBitLength( 1 ) );
}


TEST( HEngine_sn, getRCutBitLength3 )
{
    HEngine_sn e( 0, 3 );
    EXPECT_EQ( 21, e.getRCutBitLength( 0 ) );
    EXPECT_EQ( 21, e.getRCutBitLength( 1 ) );
    EXPECT_EQ( 22, e.getRCutBitLength( 2 ) );
}

TEST( HEngine_sn, getRCutBitLength4 )
{
    HEngine_sn e( 0, 4 );
    EXPECT_EQ( 16, e.getRCutBitLength( 0 ) );
    EXPECT_EQ( 16, e.getRCutBitLength( 1 ) );
    EXPECT_EQ( 16, e.getRCutBitLength( 2 ) );
    EXPECT_EQ( 16, e.getRCutBitLength( 3 ) );
}

TEST( HEngine_sn, getRCutBitLength5 )
{
    HEngine_sn e( 0, 5 );
    EXPECT_EQ( 12, e.getRCutBitLength( 0 ) );
    EXPECT_EQ( 13, e.getRCutBitLength( 1 ) );
    EXPECT_EQ( 13, e.getRCutBitLength( 2 ) );
    EXPECT_EQ( 13, e.getRCutBitLength( 3 ) );
    EXPECT_EQ( 13, e.getRCutBitLength( 4 ) );
}

TEST( HEngine_sn, getRCutBitLength6 )
{
    HEngine_sn e( 0, 6 );
    EXPECT_EQ( 10, e.getRCutBitLength( 0 ) );
    EXPECT_EQ( 10, e.getRCutBitLength( 1 ) );
    EXPECT_EQ( 11, e.getRCutBitLength( 2 ) );
    EXPECT_EQ( 11, e.getRCutBitLength( 3 ) );
    EXPECT_EQ( 11, e.getRCutBitLength( 4 ) );
    EXPECT_EQ( 11, e.getRCutBitLength( 5 ) );
}

TEST( HEngine_sn, getRCutBitLength7 )
{
    HEngine_sn e( 0, 7 );
    EXPECT_EQ( 9, e.getRCutBitLength( 0 ) );
    EXPECT_EQ( 9, e.getRCutBitLength( 1 ) );
    EXPECT_EQ( 9, e.getRCutBitLength( 2 ) );
    EXPECT_EQ( 9, e.getRCutBitLength( 3 ) );
    EXPECT_EQ( 9, e.getRCutBitLength( 4 ) );
    EXPECT_EQ( 9, e.getRCutBitLength( 5 ) );
    EXPECT_EQ( 10, e.getRCutBitLength( 6 ) );
}

TEST( HEngine_sn, getRCutBitLength8 )
{
    HEngine_sn e( 0, 8 );
    EXPECT_EQ( 8, e.getRCutBitLength( 0 ) );
    EXPECT_EQ( 8, e.getRCutBitLength( 1 ) );
    EXPECT_EQ( 8, e.getRCutBitLength( 2 ) );
    EXPECT_EQ( 8, e.getRCutBitLength( 3 ) );
    EXPECT_EQ( 8, e.getRCutBitLength( 4 ) );
    EXPECT_EQ( 8, e.getRCutBitLength( 5 ) );
    EXPECT_EQ( 8, e.getRCutBitLength( 6 ) );
    EXPECT_EQ( 8, e.getRCutBitLength( 7 ) );
}

TEST( HEngine_sn, Range4 )
{
    HEngine_sn e( 0, 3 );
    BinStr s = "111111111111111111111";
    NumTable t = e.generateRange( s );

    EXPECT_EQ( 22, t.size() );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111111111111111", HEngine::number2BinStr( t[0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111111111111110", HEngine::number2BinStr( t[1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111111111111101", HEngine::number2BinStr( t[2] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111111111111011", HEngine::number2BinStr( t[3] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111111111110111", HEngine::number2BinStr( t[4] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111111111101111", HEngine::number2BinStr( t[5] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111111111011111", HEngine::number2BinStr( t[6] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111111110111111", HEngine::number2BinStr( t[7] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111111101111111", HEngine::number2BinStr( t[8] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111111011111111", HEngine::number2BinStr( t[9] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111110111111111", HEngine::number2BinStr( t[10] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111101111111111", HEngine::number2BinStr( t[11] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111111011111111111", HEngine::number2BinStr( t[12] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111110111111111111", HEngine::number2BinStr( t[13] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111101111111111111", HEngine::number2BinStr( t[14] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111111011111111111111", HEngine::number2BinStr( t[15] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111110111111111111111", HEngine::number2BinStr( t[16] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111101111111111111111", HEngine::number2BinStr( t[17] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000111011111111111111111", HEngine::number2BinStr( t[18] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000110111111111111111111", HEngine::number2BinStr( t[19] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000101111111111111111111", HEngine::number2BinStr( t[20] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000011111111111111111111", HEngine::number2BinStr( t[21] ) );
}

TEST( HEngine_sn, Range40 )
{
    HEngine_sn e( 0, 3 );
    BinStr s = "1010101010101010101010";
    NumTable t = e.generateRange( s, 2 );

    EXPECT_EQ( 23, t.size() );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101010101010101010", HEngine::number2BinStr( t[0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101010101010101011", HEngine::number2BinStr( t[1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101010101010101000", HEngine::number2BinStr( t[2] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101010101010101110", HEngine::number2BinStr( t[3] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101010101010100010", HEngine::number2BinStr( t[4] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101010101010111010", HEngine::number2BinStr( t[5] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101010101010001010", HEngine::number2BinStr( t[6] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101010101011101010", HEngine::number2BinStr( t[7] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101010101000101010", HEngine::number2BinStr( t[8] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101010101110101010", HEngine::number2BinStr( t[9] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101010100010101010", HEngine::number2BinStr( t[10] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101010111010101010", HEngine::number2BinStr( t[11] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101010001010101010", HEngine::number2BinStr( t[12] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101011101010101010", HEngine::number2BinStr( t[13] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101000101010101010", HEngine::number2BinStr( t[14] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010101110101010101010", HEngine::number2BinStr( t[15] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010100010101010101010", HEngine::number2BinStr( t[16] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010111010101010101010", HEngine::number2BinStr( t[17] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001010001010101010101010", HEngine::number2BinStr( t[18] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001011101010101010101010", HEngine::number2BinStr( t[19] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001000101010101010101010", HEngine::number2BinStr( t[20] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000001110101010101010101010", HEngine::number2BinStr( t[21] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000010101010101010101010", HEngine::number2BinStr( t[22] ) );
}


TEST( HEngine_sn, Range8 )
{
    HEngine_sn e( 0, 8 );
    BinStr s = "00000000";
    NumTable t = e.generateRange( s );

    EXPECT_EQ( 9, t.size() );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[0] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000001", HEngine::number2BinStr( t[1] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000010", HEngine::number2BinStr( t[2] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000100", HEngine::number2BinStr( t[3] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000001000", HEngine::number2BinStr( t[4] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000010000", HEngine::number2BinStr( t[5] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000100000", HEngine::number2BinStr( t[6] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000001000000", HEngine::number2BinStr( t[7] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000010000000", HEngine::number2BinStr( t[8] ) );
}


TEST( HEngine_sn, Range65 )
{
    HEngine_sn e( 1 );
    BinStr s = "0000000000000000000010000000000000000000000000000000000000000000";
    Number number = HEngine_sn::binStr2Number( s );
    NumTable t = e.generateRange( s );

    EXPECT_EQ( 65, t.size() );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[0] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000000000000000001", HEngine::number2BinStr( t[1] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000000000000000010", HEngine::number2BinStr( t[2] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000000000000000100", HEngine::number2BinStr( t[3] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000000000000001000", HEngine::number2BinStr( t[4] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000000000000010000", HEngine::number2BinStr( t[5] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000000000000100000", HEngine::number2BinStr( t[6] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000000000001000000", HEngine::number2BinStr( t[7] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000000000010000000", HEngine::number2BinStr( t[8] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000000000100000000", HEngine::number2BinStr( t[9] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000000001000000000", HEngine::number2BinStr( t[10] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000000010000000000", HEngine::number2BinStr( t[11] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000000100000000000", HEngine::number2BinStr( t[12] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000001000000000000", HEngine::number2BinStr( t[13] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000010000000000000", HEngine::number2BinStr( t[14] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000000100000000000000", HEngine::number2BinStr( t[15] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000001000000000000000", HEngine::number2BinStr( t[16] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000010000000000000000", HEngine::number2BinStr( t[17] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000000100000000000000000", HEngine::number2BinStr( t[18] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000001000000000000000000", HEngine::number2BinStr( t[19] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000010000000000000000000", HEngine::number2BinStr( t[20] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000000100000000000000000000", HEngine::number2BinStr( t[21] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000001000000000000000000000", HEngine::number2BinStr( t[22] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000010000000000000000000000", HEngine::number2BinStr( t[23] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000000100000000000000000000000", HEngine::number2BinStr( t[24] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000001000000000000000000000000", HEngine::number2BinStr( t[25] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000010000000000000000000000000", HEngine::number2BinStr( t[26] ) );
    EXPECT_EQ( "0000000000000000000010000000000000000100000000000000000000000000", HEngine::number2BinStr( t[27] ) );
    EXPECT_EQ( "0000000000000000000010000000000000001000000000000000000000000000", HEngine::number2BinStr( t[28] ) );
    EXPECT_EQ( "0000000000000000000010000000000000010000000000000000000000000000", HEngine::number2BinStr( t[29] ) );
    EXPECT_EQ( "0000000000000000000010000000000000100000000000000000000000000000", HEngine::number2BinStr( t[30] ) );
    EXPECT_EQ( "0000000000000000000010000000000001000000000000000000000000000000", HEngine::number2BinStr( t[31] ) );
    EXPECT_EQ( "0000000000000000000010000000000010000000000000000000000000000000", HEngine::number2BinStr( t[32] ) );
    EXPECT_EQ( "0000000000000000000010000000000100000000000000000000000000000000", HEngine::number2BinStr( t[33] ) );
    EXPECT_EQ( "0000000000000000000010000000001000000000000000000000000000000000", HEngine::number2BinStr( t[34] ) );
    EXPECT_EQ( "0000000000000000000010000000010000000000000000000000000000000000", HEngine::number2BinStr( t[35] ) );
    EXPECT_EQ( "0000000000000000000010000000100000000000000000000000000000000000", HEngine::number2BinStr( t[36] ) );
    EXPECT_EQ( "0000000000000000000010000001000000000000000000000000000000000000", HEngine::number2BinStr( t[37] ) );
    EXPECT_EQ( "0000000000000000000010000010000000000000000000000000000000000000", HEngine::number2BinStr( t[38] ) );
    EXPECT_EQ( "0000000000000000000010000100000000000000000000000000000000000000", HEngine::number2BinStr( t[39] ) );
    EXPECT_EQ( "0000000000000000000010001000000000000000000000000000000000000000", HEngine::number2BinStr( t[40] ) );
    EXPECT_EQ( "0000000000000000000010010000000000000000000000000000000000000000", HEngine::number2BinStr( t[41] ) );
    EXPECT_EQ( "0000000000000000000010100000000000000000000000000000000000000000", HEngine::number2BinStr( t[42] ) );
    EXPECT_EQ( "0000000000000000000011000000000000000000000000000000000000000000", HEngine::number2BinStr( t[43] ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[44] ) );
    EXPECT_EQ( "0000000000000000000110000000000000000000000000000000000000000000", HEngine::number2BinStr( t[45] ) );
    EXPECT_EQ( "0000000000000000001010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[46] ) );
    EXPECT_EQ( "0000000000000000010010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[47] ) );
    EXPECT_EQ( "0000000000000000100010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[48] ) );
    EXPECT_EQ( "0000000000000001000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[49] ) );
    EXPECT_EQ( "0000000000000010000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[50] ) );
    EXPECT_EQ( "0000000000000100000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[51] ) );
    EXPECT_EQ( "0000000000001000000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[52] ) );
    EXPECT_EQ( "0000000000010000000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[53] ) );
    EXPECT_EQ( "0000000000100000000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[54] ) );
    EXPECT_EQ( "0000000001000000000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[55] ) );
    EXPECT_EQ( "0000000010000000000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[56] ) );
    EXPECT_EQ( "0000000100000000000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[57] ) );
    EXPECT_EQ( "0000001000000000000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[58] ) );
    EXPECT_EQ( "0000010000000000000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[59] ) );
    EXPECT_EQ( "0000100000000000000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[60] ) );
    EXPECT_EQ( "0001000000000000000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[61] ) );
    EXPECT_EQ( "0010000000000000000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[62] ) );
    EXPECT_EQ( "0100000000000000000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[63] ) );
    EXPECT_EQ( "1000000000000000000010000000000000000000000000000000000000000000", HEngine::number2BinStr( t[64] ) );
}

TEST( HEngine_sn, SortSignatureTable )
{
    SignatureTable t;

    t.push_back( std::make_pair( HEngine::binStr2Number( "1" ), HEngine::binStr2Number( "1111" ) ) );
    t.push_back( std::make_pair( HEngine::binStr2Number( "10" ), HEngine::binStr2Number( "1110" ) ) );
    t.push_back( std::make_pair( HEngine::binStr2Number( "11" ), HEngine::binStr2Number( "0110" ) ) );
    t.push_back( std::make_pair( HEngine::binStr2Number( "100" ), HEngine::binStr2Number( "0000" ) ) );
    t.push_back( std::make_pair( HEngine::binStr2Number( "101" ), HEngine::binStr2Number( "0111" ) ) );

    HEngine_s::sortSignatureTable( t );

    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000000", HEngine::number2BinStr( t[0].second ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000110", HEngine::number2BinStr( t[1].second ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000000111", HEngine::number2BinStr( t[2].second ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000001110", HEngine::number2BinStr( t[3].second ) );
    EXPECT_EQ( "0000000000000000000000000000000000000000000000000000000000001111", HEngine::number2BinStr( t[4].second ) );
}

TEST( HEngine_sn, SignatureSearch )
{
    SignatureTable t;

    for ( unsigned i = 0; i < 1000; i++ )
    {
        t.push_back( std::make_pair( i+1000, i ) );
    }

    HEngine_s::sortSignatureTable( t );

    auto p = HEngine_s::searchPairs( t, 10 );

    EXPECT_EQ( 1, p.size() );
    EXPECT_EQ( 1010, p[0].first );
    EXPECT_EQ( 10, p[0].second );

    p = HEngine_s::searchPairs( t, 100 );

    EXPECT_EQ( 1, p.size() );
    EXPECT_EQ( 1100, p[0].first );
    EXPECT_EQ( 100, p[0].second );

    p = HEngine_s::searchPairs( t, 1001 );

    EXPECT_EQ( 0, p.size() );
}


TEST( HEngine_sn, SignatureSearchMultiple )
{
    SignatureTable t;

    for ( unsigned i = 0; i < 1000; i++ )
    {
        t.push_back( std::make_pair( 1000, 1000 ) );
    }


    auto p = HEngine_s::searchPairs( t, 1000 );

    EXPECT_EQ( 1000, p.size() );
    EXPECT_EQ( 1000, p[0].first );
    EXPECT_EQ( 1000, p[0].second );
}
